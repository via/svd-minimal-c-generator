#ifndef DEVICE_H
#define DEVICE_H

#include <stdint.h>

#define IRQ_NUMBER_MAX {{ interrupts[-1].value }}
enum IRQ_NUMBER {
{%- for interrupt in interrupts %}
  {{ interrupt.name}}_IRQ = {{ interrupt.value }}, /* {{ interrupt.description }} */
{%- endfor %}
};

{%- for periph in peripherals %}
struct {{ periph.name }} {
{%- for address, locations in periph.locations | dictsort %}
{%- set indent = "" %}
{%- if locations | length > 1 %}
{%- set indent = "  " %}
  union {
{%- endif %}
{%- for loc in locations %}
{%- set array = "[" + (loc.size | int | string) + "]" if loc.size > 1 else "" %}
{{ indent }}  {{ loc.modifier }} uint32_t {{ loc.name }}{{ array }};
{%- endfor %}
{%- if locations | length > 1 %}
  };
{%- endif %}
{%- endfor %}
};

{% if periph.group and periph.generate_defines %}
{%- for pos, locations in periph.locations | dictsort %}
{%- for reg in locations %}
{%- for field in reg.fields %} 
{%- set value = (2 ** field.bit_width) - 1 %}
#define {{ periph.group }}_{{ reg.name }}_{{ field.name }}          (0x{{ "{:X}".format(value) }}UL << {{ field.bit_offset }}) 
#define {{ periph.group }}_{{ reg.name }}_{{ field.name }}_VAL(X) (((uint32_t)(X) & 0x{{ "{:X}".format(value) }}UL) << {{ field.bit_offset }}) 
{%- endfor %}
{%- endfor %}
{%- endfor %}
{%- endif %}

#define {{ periph.name }}  ((struct {{ periph.name }}*)(0x{{ "{:X}".format(periph.base_address) }}UL))


{% endfor %}

static inline void nvic_enable_irq(uint16_t irq) {
  volatile uint32_t *reg = &(NVIC->ISER0) + (irq / 32);
  *reg = 1 << (irq & 0x1F);
}

static inline void nvic_disable_irq(uint16_t irq) {
  volatile uint32_t *reg = &(NVIC->ICER0) + (irq / 32);
  *reg = 1 << (irq & 0x1F);
}

static inline void nvic_set_priority(uint16_t irq, uint8_t priority) {
  volatile uint32_t *reg = &(NVIC->IPR0) + (irq / 4);
  uint8_t prio = priority << 4;
  *reg = prio << ((irq & 0x3) * 8);
}

static inline void exception_set_priority(uint16_t exc, uint8_t priority) {
  volatile uint32_t *reg = &(SCB->SHPR1) + (exc / 4);
  uint8_t prio = priority << 4;
  *reg = prio << ((exc & 0x3) * 8);
}

#endif
